---
- name: Change log level of {{ splunk_component }} to {{ splunk_component_log_level }} via CLI
  ansible.builtin.command: |
    {{ splunk_home }}/bin/splunk set log-level {{ item.splunk_component }} -level {{ item.splunk_component_log_level }} -auth '{{ splunk_auth }}'
  register: log_level_chg_out
  changed_when: log_level_chg_out.rc == 0
  failed_when: log_level_chg_out.rc != 0
  become: true
  become_user: "{{ splunk_nix_user }}"
  when:
    - splunk_component is defined
    - splunk_component_log_level is defined
  loop: "{{ splunk_components }}"

- name: Set log and log-local facts so we don't misspell them
  ansible.builtin.set_fact:
    splunk_log_cfg: "{{ splunk_home }}/etc/log.cfg"
    splunk_log_local_cfg: "{{ splunk_home }}/etc/log-local.cfg"

- name: Make sure log-local.cfg exists
  ansible.builtin.stat:
    path: "{{ splunk_log_local_cfg }}"
  register: log_local_stat
  become: true

- name: Copy log to log-local if it doesn't exist
  ansible.builtin.copy:
    remote_src: true
    src: "{{ splunk_log_cfg }}"
    dest: "{{ splunk_log_local_cfg }}"
    owner: "{{ splunk_nix_user }}"
    group: "{{ splunk_nix_group }}"
    mode: preserve
  become: true
  when: not log_local_stat.stat.exists

- name: If it exists, add after splunkd stanza or change the log level and persist it in log-local.cfg
  ansible.builtin.lineinfile:
    path: "{{ splunk_log_local_cfg }}"
    regexp: 'category.{{ item.splunk_component }}=[^,\s]+'
    line: 'category.{{ item.splunk_component }}={{ item.splunk_component_log_level }}'
    insertafter: '^\[splunkd\]'
    firstmatch: true
  become: true
  become_user: "{{ splunk_nix_user }}"
  loop: "{{ splunk_components }}"
