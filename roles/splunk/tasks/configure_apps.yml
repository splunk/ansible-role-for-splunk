---
- name: Include determine_deploy_path.yml
  include_tasks: determine_deploy_path.yml

  # Prep the Ansible host to deploy apps then install them
- block:
    - name: Create local directory for managing repos on the target host
      file:
        path: "{{ git_local_clone_path }}{{ ansible_nodename }}"
        state: directory
      delegate_to: localhost
      changed_when: false

    - name: Install .rsync-filter to avoid copying undesirable files and folders to the target host later
      copy:
        src: rsync-filter
        dest: "{{ git_local_clone_path }}{{ ansible_nodename }}/.rsync-filter"
      delegate_to: localhost
      changed_when: false

    - name: Download defined Git repos to local Ansible host
      git:
        accept_hostkey: true
        repo: "{{ git_app.git_server | default(git_server) }}/{{ git_app.git_project | default(git_project) }}/{{ git_app.name }}"
        version: "{{ git_app.git_version | default(git_version) }}"
        dest: "{{ git_local_clone_path }}{{ ansible_nodename }}/{{ git_app.name }}"
        key_file: "{{ git_key }}"
        force: true
      loop: "{{ git_apps }}"
      loop_control:
        loop_var: git_app
      delegate_to: localhost
      changed_when: false
      check_mode: false

    - name: Ensure rsync is installed on target host
      package:
        name: rsync
        state: present
        update_cache: true
      become: true

    - name: "Comment out requiretty in sudoers as it causes synchronize to fail on target host"
      lineinfile:
        dest: "/etc/sudoers"
        state: present
        regexp: "^#?{{ item }}"
        line: "#{{ item }}"
        create: true
        owner: root
        group: root
        mode: 0440
      loop:
        - "Defaults    requiretty"
      become: true

    - name: Install apps
      include_tasks: install_apps.yml
      loop: "{{ git_apps }}"
      loop_control:
        loop_var: git_app_var
      vars:
        app_dest: "{{ git_app_var.splunk_app_deploy_path | default(splunk_app_deploy_path) }}"
        app_src: "{{ git_local_clone_path }}{{ ansible_nodename }}/{{ git_app_var.name }}"

    - name: Cleanup the local directory that was used to manage repos on the target host
      file:
        path: "{{ git_local_clone_path }}{{ ansible_nodename }}"
        state: absent
      delegate_to: localhost
      changed_when: false

  # Conditional for block
  when:
    - git_apps is defined
    - git_version is defined
    - git_key != 'undefined'
    - git_server != 'undefined'
    - git_project != 'undefined'
