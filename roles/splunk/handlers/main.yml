---
# handlers file for splunk role
# handlers are run in the order defined in this file
# thus "set ulimits in init.d" has been placed at the top to ensure it runs before splunk is started
- name: set ulimits in init.d
  lineinfile:
    path: /etc/init.d/splunk
    insertafter: ^\s+echo Starting Splunk\.\.\.$
    line: "{{ item }}"
    state: present
  loop:
    - ulimit -Hn 65536
    - ulimit -Sn 32768
  become: true
  ignore_errors: true
  when: splunk_use_initd and ansible_os_family == "RedHat" and ansible_distribution_major_version|int > 6

- name: update init.d to accept license
  replace:
    path: /etc/init.d/splunk
    regexp: '(start --no-prompt --answer-yes)$'
    replace: '\1 --accept-license'
  become: true
  when: splunk_use_initd

- name: reload systemctl daemon
  systemd:
    daemon_reload: true
  become: true
  when: not splunk_use_initd

- name: stop splunk
  service:
    name: "{{ splunk_service }}"
    state: stopped
  become: true

- name: start splunk
  service:
    name: "{{ splunk_service }}"
    state: started
  become: true

- name: apply indexer cluster bundle
  command: "{{ splunk_home }}/bin/splunk apply cluster-bundle --answer-yes --skip-validation -auth {{ splunk_auth }}"
  become: true
  become_user: "{{ splunk_nix_user }}"
  register: apply_cluster_bundle_result
  changed_when: apply_cluster_bundle_result.rc == 0
  failed_when: apply_cluster_bundle_result.rc != 0
  retries: "{{ splunk_apply_cluster_bundle_retries }}"
  delay: "{{ splunk_apply_cluster_bundle_delay }}"
  no_log: true
  when: "'clustermaster' in group_names"

- name: reload deployment server
  command: "{{ splunk_home }}/bin/splunk reload deploy-server -auth {{ splunk_auth }}"
  become: true
  become_user: "{{ splunk_nix_user }}"
  no_log: true
  when: "'deploymentserver' in group_names"

- name: apply shcluster-bundle
  command: "{{ splunk_home }}/bin/splunk apply shcluster-bundle -preserve-lookups true --answer-yes -auth {{ splunk_auth }} -target {{ deploy_target }}"
  become: true
  become_user: "{{ splunk_nix_user }}"
  register: apply_shcluster_bundle_result
  changed_when: apply_shcluster_bundle_result.rc == 0
  failed_when: apply_shcluster_bundle_result.rc != 0 
  retries: "{{ splunk_apply_shcluster_bundle_retries }}"
  delay: "{{ splunk_apply_shcluster_bundle_delay }}"
  no_log: true
  when: "'shdeployer' in group_names and deploy_target is defined"

- name: restart splunk
  service:
    name: "{{ splunk_service }}"
    state: restarted
  become: true

- name: restart redhat auditd service
  command: service auditd condrestart
  become: true
  when: ansible_os_family == 'RedHat'

- name: restart non-redhat auditd service
  service:
    name: auditd
    state: restarted
  become: true
  when: ansible_os_family != 'RedHat'
